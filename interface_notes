interface.py
├── Imports
│   ├── serial, time, re, numpy, matplotlib (pyplot, FuncAnimation, TextBox, Button)
│   ├── voice_to_text (v2t) – for voice recognition and trigger listening
│   ├── subprocess – to call phi3.5 for command parsing
│   └── piper_tts – for text-to-speech confirmation prompts
│
├── Configuration & Initialization
│   ├── SERIAL_PORT & BAUD_RATE – settings for Arduino connection
│   ├── ser – open serial connection (with timeout) to Arduino
│   ├── time.sleep(2) – pause to allow the serial connection to initialize
│   ├── Global Variable: countdown_end_time – stores end time for any active timer
│   └── Data Storage Arrays (t_data, rpm_data, ma_data, set_data, pwm_data, perr_data) & start_time
│
├── Regular Expression Pattern
│   └── pattern – used to match and extract RPM, MA, Set, PWM, and %Err values from serial input lines
│
├── Function Definitions
│   ├── parse_command(command)
│   │   └── Parses a command string (from voice input or phi3.5) to extract RPM and timer values.
│   │       • Checks for a simple two-number format first.
│   │       • Otherwise, uses regex to find “rpm” and time units.
│   │
│   ├── execute_command(rpm, timer)
│   │   └── Formats and sends the command (as "rpm,timer" or just "rpm") to the Arduino.
│   │           Also sets the countdown timer if a time is provided.
│   │
│   ├── confirm_and_execute_command(rpm, timer)
│   │   └── Uses Piper TTS to ask the user for confirmation (e.g., “Do you really want to run for X seconds at Y RPM?”).
│   │           Listens for a voice response and executes the command if “yes” is detected, otherwise cancels.
│   │
│   ├── send_command(command)
│   │   └── Processes a command string (typically from manual input), extracts RPM and timer using parse_command,
│   │           and sends the command directly to the Arduino.
│   │
│   ├── manual_submit(event)
│   │   └── Callback for the manual input submit button.
│   │           Reads values from text boxes, builds the command string, and sends it to the Arduino.
│   │
│   ├── voice_input(event)
│   │   └── Callback for the voice input button.
│   │           • Listens for a voice command (using v2t.listen_for_trigger).
│   │           • Builds a prompt for phi3.5 and retrieves a formatted command.
│   │           • Parses the result and calls confirm_and_execute_command (or execute_command if no timer) for confirmation.
│   │
│   └── update(frame)
│       └── Animation callback that:
│               • Reads serial input from the Arduino.
│               • Parses and stores data (RPM, MA, Set, PWM, %Err).
│               • Updates the plots and countdown timer display on the figure.
│
├── Plot & Widget Setup
│   ├── Figure and Axes – sets up subplots for RPM/MA/Set, PWM, and %Err
│   ├── Countdown Text – displays remaining time if a timer is active
│   ├── Plot Lines – initializes lines for RPM, MA, Set, PWM, and %Err
│   ├── FuncAnimation – calls update() every 100 ms to refresh the plot
│   └── Widgets
│       ├── TextBoxes – for manual RPM and Time input
│       ├── Submit Button – calls manual_submit() on click
│       └── Voice Input Button – calls voice_input() on click
│
└── Main Execution
    ├── plt.show() – starts the GUI event loop
    └── ser.close() – closes the serial connection when the plot window is closed